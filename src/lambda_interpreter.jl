import Base: *, ^, +, ⊻, !, ==, show, convert, Int, Bool

# ----------------------------------------------------------------
# Kernel
φ(α,β) = eval(α)(eval(β))
φ(α)   = foldl(φ, α)

macro φ(α...) φ(α) end

# ----------------------------------------------------------------
# Combinators
const S = α -> β -> γ -> (α)(γ)((β)(γ))    # (α -> (β -> γ)) -> ((α -> β) -> (α -> γ))
const K = α -> β -> α
const I = α -> α                           # (S)(K)(K)

const ω = (S)(I)(I)                        # γ -> I(γ)(I(γ)) === γ -> γ(γ)

# Ω = (ω)(ω)                               # (γ -> γ(γ))(γ -> γ(γ))
                                           # : self-replicating code

const Y = ƒ->(α->(ƒ)(α)(α))(α->(ƒ)(α)(α))  # : loop

# ----------------------------------------------------------------
# Nat
const zero = (K)(I)
const succ = n -> γ -> γ ∘ n(γ)

+(α) = β -> (α)(succ)(β)
*(α) = β -> (α ∘ β)
^(α) = β -> (β)(α)

int = n -> (n)(α -> α+1)(0)

nat(n,m) = n == 0 ? m : nat(n-1, succ(m))
# (n::Int)(x) = nat(n,zero)(x)

# ----------------------------------------------------------------
# Bool
const tt = (K)
const ff = (K)(I)

!(α)  = (α)(ff)(tt)
eq(α) = β -> (α)(β)((!)(β))
==(α) = β -> (α)(β)((!)(β))
∧(α)  = β -> (α)(β)(α)
∨(α)  = β -> (α)(α)(β)
⊻(α)  = β -> (α)((!)(β))(β)

bool = ƒ -> (ƒ)(true)(false)
# (b::Bool)() = b ? tt : ff

# ----------------------------------------------------------------
# Control Flow
const ifelse = α -> β -> γ -> (α)(β)(γ)

# ----------------------------------------------------------------
# Variables
var(α) = β -> (β)(α)

# ----------------------------------------------------------------
# Pair
×(α) = β -> γ -> (γ)(α)(β)

const nil = (K)
const fst = (K)
const snd = (K)(I)

pair = ρ -> (fst(ρ),snd(ρ))

unit(α) = α × ()
×(iterable::α) where α = foldr(×, iterable)

# ----------------------------------------------------------------
# Type Algebra
+(α::Type) = β::Type -> Union{α,β}
*(α::Type) = β::Type -> Tuple{α,β}

# ----------------------------------------------------------------
# Arity
# (==)(α,β) = (==)(β)(α)
∧(α,β) = ∧(bool(α))(bool(β))
∨(α,β) = ∨(bool(α))(bool(β))
⊻(α,β) = ⊻(bool(α))(bool(β))

×(α,β) = ×(α)(β)

(+)(α,β) = (+)(nat(α))(nat(β))
(*)(α,β) = (*)(nat(α))(nat(β))
(^)(α,β) = (^)(nat(α))(nat(β))

# ----------------------------------------------------------------
5()
5() + 6()

f = x -> y -> +(x)(y)
g = w -> x -> y -> z -> +(x)(y) |> +(z) |> +(w)
x, y, z = 3, 4, 5

debug = x -> println(♯(x))
@φ debug (+, 10, 15)

@φ + (∏, 5, (+, (+, 2, 0), 3)) 0
@φ + 10 15
@φ g 2 3 4 2
@φ + (+(2) ∘ +(2), 2) (+(2) ∘ +(2), 2)
@φ ((+, 2) ∘ (+, 2)) 10
# @φ g 2 3 y 2

# @φ (x -> x) (∏, 10, 2)
# (@φ (x,y) -> +(2))(ℕ(2))
# @φ exp (x -> 2int(x), (∏, 10, 2))

@φ log (exp, Int(10))

@φ x = 5

@φ true ∧ !false ∨ !true ∨ false
@φ true == true
@φ (==, true, false)
@φ true ? true : false
# @φ (2, ==, 2) && (false || true)

@φ (x -> y -> vcat(x,y)) [1:5...] [5:10...]
@φ (x -> x) [1:5...]

@φ true × false fst
@φ true × false × true fst snd



